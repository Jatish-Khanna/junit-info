

JUnit Jupiter - new programming model and an extension model to writing test cases
JUnit vintage - for backward compatibility b/w JUnit 3 and 4


Most used annotations:

@Test - donates that method is a test method
@ParameterizedTest - 
@BeforeEach - This ensure to execute "before" each test method
@AfterEach - this ensure to execute "after" each test method
@BeforeAll -  "Once" before all the test method. Must ensure the method must be "static"
@AfterAll - "once" after all the test method. Must ensure the method must be "static".

@DisplayName - to display custom name for the test case
@Disabled - to "ignore" the test case or test class
@Nested - to create "nested" subclass
@RepeatedTest - this provide the count the test case should be repeated

Note: all Above mentioned annotations are non-repeatable.
What does repeatable means -
  - Any annotation which can be placed 2+ times over the same method or test class and definition marked with @Repeatable.
Note: Need to check for below mentioned annotations if any of them are repeatable


@Tag - "marks" the test class and method with tags to perform filtering and discovering
@TestFactory - mark method is "test factory" for dynamic test



Life Cycle of testing - 
it is driven by annotations -
Note: None of the method should be annotated as private, else it will be ignored by JUnit

 @BeforeAll --------->[start:]  @BeforeEach -----------> @Test --------------> @AfterEach [goto start]--------------> @AfterAll
 
 @BeforeAll and @AfterAll if there are "multiple methods annotated" with the mentioned annotations
   - The order of execution is undeterminded for respective annotations
  
  
  
 Example - a sample use of all the annotations
 
 class SampleTestCase {
  
  // keyword static is important for the transaction
  // If method annotated is not static a JUnitException will be thrown at "runtime"
  @BeforeAll
  public static void init() {
  
  }
  
  // Must not be "static" else JUnitException will be thrown at runtime
  
  @BeforeEach
  public void setupEachTest() {
  
  }
  
  // Should not be "private" or "static" else Testmethod will be ignore
  @Test
  public void firstTest() {
  
  }
  
  // Same rules for @BeforeEach
  @AfterEach
  public void afterEachTest() {
  
  }
  
  // Same rules as "@BeforeAll"
  @AfterAll
  public static void closeAfterAll() {
  
  }
 }
 
 


JUnit Assumptions - (like the assertions)
Assumptions provides "static" methods to support conditional test executions.
  . A failed assumption in a test being "Aborted"
  . Assumptions are used whenever it does not make sense to continue execution of given test method
  . Methods provided by assumptions
    * assumeThat
    * assumeTrue
    * assumeFalse
    
 class SampleTestCase {
 
  @Test
  void firstTest() {
    System.setProperty("ENV", "DEV");
    Assumptions.assumeTrue("DEV".equals(System.getProperty("ENV")));
    
    System.setProperty("ENV", "PROD");
    Assumptions.assumeFalse("DEV".equals(System.getProperty("ENV")));
    
  }
 }
    
    
    
  Junit Test suites-
    To run test spread across multiple test cases and different packages
    . Annotations from JUnit to create test suites
      * @SelectPackages
      * @SelectClasses
      
      // To filter over class packages
      * @IncludePackages
      * @ExcludePackages
      
      // To filter over classname patterns
      * @IncludeClassNamePatterns
      * @ExcludeClassNamePatterns
      
      // To filter over class tags
      * @IncludeTags
      * @ExcludeTags
    
  Example-
  
    @RunWith(JUnitPlatform.class)
    @SelectPackages("com.test.success")
    class TestSuiteRunner {
      
    }
    
    
    
 JUnit Assertions -
 
   These help in validating the expected output of JUnit test cases
    . Static methods are available in org.junit.jupiter.Assertions
    
     - assertEquals
     - assertNotEquals
     
  Example - 
  
  import static org.junit.jupiter.Assertions.*;
  
  class SampleTestExample {
  
    @Test
    public void testDone() {
      assertEquals(1, 1);
      
      assertNotEquals(1, 2);
    }
  }
  
  
  
  
  @RepeatedTest annotations -
  
    Features of @RepeatedTest annotations
     . It can give a custom display name with dynamic placeholders
       {displayName} -> Display name for repeated annotation
       {currentRepetition} -> the current repetition count
       {totalRepetitions} -> total number of repetition count
  
  Predefined layout for repetition name:
    RepeatedTest.SHORT_DISPLAY_NAME ->(default) repetition {currentRepetition} of {totalRepetitions}
    RepeatedTest.LONG_DISPLAY_NAME -> {displayName} :: repetition {currentRepetition} of {totalRepetitions}
  
  class MyTestClass {
  
    static int testCounter = 1;
  
    @BeforeAll
    public static void init() {
    
      System.out.println("Init - with @BeforeAll annotation");
    }
    
    // The output of method will be -
    //	Test counter in test method: 1
//	Test counter in test method: 2
//	Test counter in test method: 3
//	Test counter in test method: 4
//	Test counter in test method: 5
//	Test counter in test method: 6

// The test has been repeated +! times the value specified in the annotation

    @Test
    @RepeatedTest(5)
    public void testMethod() {
      System.out.println("Test counter in test method: "+ testCounter);
      testCounter++;
    }
  }
  
  
  RepetitionInfo - interface injected to get details of repition at runtime
  
  class SampleApplicationTest {
  
     @BeforeEach
     public void test(RepetitionInfo repetitionInfo) {
        repitionInfo.getCurrentRepetition();
        repitionInfo.getTotalRepetitions();
     }
  }



JUnit @Disabled annotation can be used to disable test method from the test suite. This can be applied over test class and
individual test interface

 - Optional parameters "only one" - indicates the reason why test has been disabled
 - This only applied to 
   . Test class or method annotated with @Test
   
 When applied at the class level, all test methods within that class are automatically disabled as well. 

When applied at the method level, the presence of this annotation does not prevent the test class from being instantiated. 
Rather, it prevents the execution of the test method and method-level lifecycle callbacks such as 
  @BeforeEach methods, @AfterEach methods, and corresponding extension APIs.




JUnit @Tag annotations-

  This annotations can be used to filter test cases from the test plans
  . It can help creating multiple test plans for different environment
  . Different use cases or any specific requirement
  . Execute set of tests by including only those tests in test plan or by excluding test from those plans
  
  
  Example - 
  
  @RunWith(JUnitPlatform.class)
  @SelectedPackages("com.test.success")
  @IncludeTags("development")
  
  class SampleApplicationDevelopmentTest {
  
  }
  
  @RunWith(JUnitPlatform.class)
  @SelectedPackages("com.test.success")
  @IncludeTags("production")
  class SampleProductionTest {
  
  }
  
  
  class MySampleTest {
    
     @Tag("development")
     @Test
     public void myDevTest() {
     
     }
     
     @Tag("production")
     @Test
     public void myProdTest() {
     
     }
     
     @Tag("development")
     @Tag("production")
     @Test
     public void myDevProdTest() {
     
     }
  }
  
  
  
  Assertions.assertThrows()
    To find and verify the test case result should be an exception
    
    public static <T extends Throwable> T assertThrows(Class<T> expectedType, Executable executable)
    
    if no exception is thrown or exception thrown is different from expected, the test will fail
    ** Exception of "Super Type" are allowed, this will succeed our test case
    
    
    @Test
    void testExpectedException {
      Assertions.assertThrows(NumberFormatException.class, () -> {Integer.parseInt("one");});
      
      // Super type exceptions expected 
      Assertions.assertThrows(Exception.class, () -> {Integer.parseInt("one");});
    }
    




Assertions class Examples-

1. Assertions.assertEquals and Assertions.assertNotEquals
  To verify the expected value and original value are equal or unEqual
  - The assertions have overloaded method for different types int, float, long, String ...
  - Overloaded method to supply the messages
 
  public static void assertEquals(int expected, int actual)
  public static void assertEquals(int expected, int actual, String message)
  public static void assertEquals(int expected, int actual, Supplier<String> messageSupplier)
  
  Example
    Assertions.assertEquals(1, 1);
    Assertions.assertEquals(1,2, "This test has been failed");
    Assertions.assertEquals(1, 3, () -> "this test has been failed")
    
  Note: Assertions.assertNotEquals doesn't have multiple overloaded messages like Assertions.assertEquals
  It has only below mentioned methods that accepts Object parameters
    
  Assertions.assertNotEquals(Object expected, Object actual)
  Assertions.assertNotEquals(Object expected, Object actual, String message)
  Assertions.assertNotEquals(Object expected, Object actual, Supplier<String> messageSupplier)

  Example- 
    Assertions.assertNotEquals("1", "2");
    Assertions.assertNotEquals("1", "2", "This test has been failed")
    // Supplier<String> lamda expression has been used
    Assertions.assertNotEquals("1", "2", () -> "This test has been failed")

2. Assertions.assertArrayEquals
  - Similar to #1 Assertions.assertEquals we have multiple overloaded method to verify if expected and actual arrays are equal
  - With each having three overloaded functions
  
  Example-
  
  Assertions.assertArrayEquals(new int[]{1,2,3}, new int[]{1, 2, 3})
  Assertions.assertArrayEquals(new int[]{1,2,3}, new int[]{1,2,4},"This test has been failed")
  Assertions.assertArrayEquals(new int[]{1,2,3}, new int[]{1,2,4}, () -> "This test has been failed")

3. Assertions.assertIterableEquals
  It verifies that actual and expected Iterables are equal. The check done has been "Deeply"
  . It means that all the Objects and count of objects within the array are equal
  
  Assertions.assertIterableEquals(Iterable<?> actual, Iterable<?> expected)
  Assertions.assertIterableEquals(Iterable<?> actual, Iterable<?> expected, String message)
  Assertions.assertIterableEquals(Iterable<?> actual, Iterable<?> expected, Supplier<String> supplierMessage)
  
  Example- 
  
    Assertions.assertIterableEquals(Arrays.asList(1,2,3), Arrays.asList(1,2,3))
  

4. Assertions.assertLinesMatch
  To verify if the expected list of String matches actual list. The logic to match a String with another string
   . Check if expected.equals(actual) - if yes, continue with next pair
   . Otherwise treat expected as regural expression
     expected.matches(actual)
     
   . Otherwise check if expected line is a fastforward marker, if yes apply fastforward actual lines accordingly
rd

5. Assertions.assertNull and Assertions.assertNotNull
  assertNull checks if the actual is null
  assertNotNull check if the actual is not null
  
  
  Assertions.assertNull(Object actual)
  Assertions.assertNull(Object actual, String message)
  Assertions. assertNull(Object actual, Supplier<String> supplierMessage)
  
  Assertions.assertNotNull(Object actual)
  Assertions.assertNotNull(Object actual, String message)
  Assertions.assertNotNull(Object actual, Supplier<String> supplierMessage)

  String nullString = null;
  String nonNullString = "I am happy!!"
  
  Assertions.assertNull(nullString)
  Assertions.assertNotNull(nonNullString)

6. Assertions.assertSame and Assertions.assertNotSame
  To verify if the actual and expected reference to the same object
  
  Assertions.assertSame(Object expected, Object actual)
  Assertions.assertSame(Object expected, Object actual, String message)
  Assertions.assertSame(Object expected, Object actual, Supplier<String> supplierMessage)
  am 
  Assertions.assertNotSame(Object expected, Object actual)
  Assertions.assertNotSame(Object expected, Object actual, String message)
  Assertions.assertNotSame(Object expected, Object actual, Supplier<String> supplierMessage)
  
  Example-
  String firstRef = "I am excited! how can I be a builder for Fifth generation!"
  Sting secondRef = firstRef;
  
  Assertions.assertSame(firstRef, secondRef)
  Assertions.assertSame(firstRef, secondRef, "check reference are not same")
  Assertions.assertSame(firstRef, secondRef, () -> "check reference are not same")


7. Assertions.assertTimeout and Assertions.assertTimeoutPreemptively
  These are user to verify long running tasks. If given task inside testcase takes more than specified duration
    - Test will fail
  


8. Assertions.assertTrue and Assertions.assertFalse
9. Assertions.assertThrows
10. Assertions. assertFail
